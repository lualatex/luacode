% \iffalse meta-comment (by the way, this file is contains UTF-8)
%
% Written in 2010 by Manuel Pégourié-Gonnard <mpg@elzevir.fr>
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
%
% The Current Maintainer of this work is Manuel Pégourié-Gonnard
%
% This work consists of the main source file luacode.dtx
% and the derived files
%    luacode.sty luacode.pdf
%
% Unpacking:
%    tex luacode.dtx
% Documentation:
%    pdflatex luacode.dtx
%
%<*ignore>
\begingroup
  \def\x{LaTeX2e}%
\expandafter\endgroup
\ifcase 0\ifx\install y1\fi\expandafter
         \ifx\csname processbatchFile\endcsname\relax\else1\fi
         \ifx\fmtname\x\else 1\fi\relax
\else\csname fi\endcsname
%</ignore>
%<*install>
\input docstrip.tex

\keepsilent
\askforoverwritefalse

\preamble

See the source file for author and licensing information.

\endpreamble

\generate{%
  \usedir{tex/lualatex/luacode}%
  \file{luacode.sty}{\from{luacode.dtx}{texpackage}}%
}

\generate{%
  \usedir{doc/lualatex/luacode}%
  \file{test-luacode.tex}{\from{luacode.dtx}{testlatex}}%
}

\obeyspaces
\Msg{************************************************************************}
\Msg{*}
\Msg{* To finish the installation you have to move the following}
\Msg{* files into a directory searched by TeX:}
\Msg{*}
\Msg{*     luacode.sty}
\Msg{*}
\Msg{* Happy TeXing!}
\Msg{*}
\Msg{************************************************************************}

\endbatchfile
%</install>
%<*ignore>
\fi
%</ignore>
%<*driver>
\documentclass{ltxdoc}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage{lmodern}
\usepackage{fixltx2e}

\usepackage{xspace}
\usepackage[a4paper]{geometry}
\usepackage[english]{babel}
\usepackage[colorlinks]{hyperref}
\usepackage{bookmark}

\newcommand*\email [1] {<\href{mailto:#1}{#1}>}
\newcommand \file       {\nolinkurl}
\newcommand \pk         {\textsf}
\newcommand \cmdname    {\texttt}

\pdfstringdefDisableCommands{%
  \def\cs#1{\@backslashchar #1}}

\MakeShortVerb\|

\begin{document}
  \DocInput{luacode.dtx}%
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \title{The \pk{luacode} package}
% \author{Manuel P\'egouri\'e-Gonnard \email{mpg@elzevir.fr}}
% \date{v0.0 1970/01/01}
%
% \maketitle
%
% \begin{abstract}
% \end{abstract}
%
% \tableofcontents
%
% \section{Documentation}
%
%    \section{Implementation}
%
%    \begin{macrocode}
%<*texpackage>
%    \end{macrocode}
%
%    \subsection{Preliminaries}
%
%    Catcode defenses.
%
%    \begin{macrocode}
\begingroup
  \catcode123 1 % {
  \catcode125 2 % }
  \catcode 35 6 % #
  \toks0{}%
  \def\x{}%
  \def\y#1 #2 {%
    \toks0\expandafter{\the\toks0 \catcode#1 \the\catcode#1}%
    \edef\x{\x \catcode#1 #2}}%
  \y 123 1  % {
  \y 125 2  % }
  \y  35 6  % #
  \y  10 12 % ^^J
  \y  34 12 % "
  \y  36 3  % $ $
  \y  39 12 % '
  \y  40 12 % (
  \y  41 12 % )
  \y  42 12 % *
  \y  43 12 % +
  \y  44 12 % ,
  \y  45 12 % -
  \y  46 12 % .
  \y  47 12 % /
  \y  60 12 % <
  \y  61 12 % =
  \y  64 11 % @ (letter)
  \y  62 12 % >
  \y  95 12 % _ (other!)
  \y  96 12 % `
  \edef\y#1{\endgroup\edef#1{\the\toks0\relax}\x}%
\expandafter\y\csname luacode@AtEnd\endcsname
%    \end{macrocode}
%
%    Package declaration.
%
%    \begin{macrocode}
\ProvidesPackage{luacode}[1970/01/01 v0.0 DESCRIPTION]
%    \end{macrocode}
%
%    Make sure Lua\TeX\ is used.
%
%    \begin{macrocode}
\RequirePackage{ifluatex}
\ifluatex\else
  \PackageError{luacode}{LuaTeX is required for this package. Aborting.}{%
    This package can only be used with the LuaTeX engine\MessageBreak
    (command `lualatex'). Package loading has been stopped\MessageBreak
    to prevent additional errors.}
  \lltxb@core@AtEnd
  \expandafter\endinput
\fi
%    \end{macrocode}
%
%    Use \pk{luatexbase} for catcode tables, and ensure we have the primitives
%    we need.
%
%    \begin{macrocode}
\RequirePackage{luatexbase}
\luatexbase@ensure@primitive{scantextokens}%
%    \end{macrocode}
%
%    \subsection{Internal code}
%
%    Execute a piece of code, with shortcuts for backslash and percent, and
%    trying to preserve newlines. This internal macro is long so that we can
%    use in the environment, while the corresponding user command will be
%    short.
%
%    \begin{macrocode}
\newcommand*\luacode@execute [1] {%
  \begingroup
  \escapechar92
  \newlinechar10
  \edef\\{\string\\}%
  \let\%=\luacode@percentchar
  \expandafter\expandafter\expandafter\endgroup
  \luatexbase@directlua{#1}}
%    \end{macrocode}
%
%    A catcode 12 percent char for use in the previous command.
%
%    \begin{macrocode}
\begingroup \escapechar\m@ne \edef\aux{\endgroup
  \unexpanded{\newcommand\luacode@percentchar}{\string\%}%
}\aux
%    \end{macrocode}
%
%    Generic code for environments; the argument is the name of a catcode
%    table.  We're normally inside a group, but let's open a new one in case
%    we're called directly rather that using |\begin|. Define the end marker
%    to be |\end{<envname>}| with current catcodes.
%
%    \begin{macrocode}
\newcommand*\luacode@begin [1] {%
  \begingroup
  \escapechar92
  \luatexcatcodetable#1\relax
  \edef\luacode@endmark{\string\end{\@currenvir}}%
  \expandafter\def \expandafter\luacode@endmark \expandafter{%
    \luatexscantextokens \expandafter{\luacode@endmark}}%
  \luacode@grab@body}
%    \end{macrocode}
%
%    We'll define the body grabber in a moment, but let's see how the
%    environment ends now.
%
%    \begin{macrocode}
\newcommand\luacode@end{%
  \edef\luacode@next{%
    \noexpand\luacode@execute{\the\luacode@lines}%
    \noexpand\end{\@currenvir}}%
  \expandafter\endgroup
  \luacode@next}
%    \end{macrocode}
%
%    It is not possible to grab the body using a macro with delimited
%    argument, since the end marker may contains open-group characters,
%    depending on the current catcode regime. So we collect it linewise and
%    check each line against the end marker.
%
%    Sotrage for lines.
%
%    \begin{macrocode}
\newtoks\luacode@lines
\newcommand*\luacode@addline [1] {%
  \luacode@lines\expandafter{\the\luacode@lines^^J#1}}
%    \end{macrocode}
%
%    Loop initialisation. Set endlinechar explicitely so that we can use it
%    as a delimiter (and later when writing the code to Lua).
%
%    \begin{macrocode}
\newcommand \luacode@grab@body {
  \luacode@lines{}%
  \endlinechar10
  \luacode@grab@lines}
%    \end{macrocode}
%
%    The actual line-grabbing loop.
%
%    \begin{macrocode}
\long\def\luacode@grab@lines#1^^J{%
  \def\luacode@curr{#1}%
  \luacode@strip@spaces
  \ifx\luacode@curr\luacode@endmark
    \expandafter\luacode@end
  \else
    \expandafter\luacode@addline\expandafter{\luacode@curr}%
    \expandafter\luacode@grab@lines
  \fi}
%    \end{macrocode}
%
%    Strip catcode 12 spaces from the beginning the token list inside
%    |\luacode@curr|. First we need catcode 12 space, then we
%    procede in the usual way.
%
%    \begin{macrocode}
\begingroup\catcode32 12 \expandafter\endgroup
\@firstofone{\newcommand\luacode@spaceother{ }}
\newcommand \luacode@strip@spaces {%
  \expandafter\luacode@strip@sp@peek\luacode@curr\@nil}
\newcommand \luacode@strip@sp@peek {%
  \futurelet\@let@token\luacode@strip@sp@look}
\newcommand \luacode@strip@sp@look {%
  \expandafter\ifx\luacode@spaceother\@let@token
    \expandafter\@firstoftwo
  \else
    \expandafter\@secondoftwo
  \fi{%
    \afterassignment\luacode@strip@sp@peek
    \let\@let@token=
  }{%
    \luacode@strip@sp@def
  }}
\@ifdefinable \luacode@strip@sp@def \relax
\def \luacode@strip@sp@def #1\@nil{%
  \def\luacode@curr{#1}}
%    \end{macrocode}
%
%    Finally, we need a custom catcode table for the default environment:
%    everything other, except backslash, braces and letters which retain their
%    natural catcodes.
%
%    \begin{macrocode}
\newluatexcatcodetable \luacode@table@soft
\setluatexcatcodetable \luacode@table@soft {%
  \luatexcatcodetable\CatcodeTableOther
  \catcode 92  0
  \catcode 123 1
  \catcode 125 2
  \setcatcoderange {65}{90} {11}
  \setcatcoderange {97}{122}{11}
}
%    \end{macrocode}
%
%    \subsection{Public macros and environments}
%
%    The |\luaexec| macro.
%
%    \begin{macrocode}
\newcommand*\luaexec [1] {\luacode@execute{#1}}
%    \end{macrocode}
%
%    Environments using different catcode tables.
%
%    \begin{macrocode}
\newenvironment {luacode}  {\luacode@begin\luacode@table@soft} {}
\newenvironment {luacode*} {\luacode@begin\CatcodeTableOther}  {}
\newcommand     \luacodestar    {\@nameuse{luacode*}}
\def            \endluacodestar {\@nameuse{endluacode*}}
%    \end{macrocode}
%
%    We're already done!
%
%    \begin{macrocode}
\luacode@AtEnd
%</texpackage>
%    \end{macrocode}
%
%    \section{Test file}
%
%    \begin{macrocode}
%<*testlatex>
\documentclass{minimal}
\usepackage{luacode, ted, trace}
\begin{document}

$\luaexec{
  tex.sprint("\\pi \\neq ",
  % a tex comment
  tostring(math.pi):gsub('\%.', '+'))
}$

\newcommand\foo{3}
\[
  \begin{luacode}
    tex.sprint("\\pi \\neq ", tostring(math.pi):gsub('%.', '+'))
    -- a lua comment
    tex.sprint("-", math.sqrt(\foo))
  \end{luacode}
\]

\[
  \begin{luacode*}
    -- a lua comment
    tex.sprint("\\pi \\neq ", tostring(math.pi):gsub('%.', '+'))
  \end{luacode*}
\]

\newenvironment{mathluacode}{
  \[
    \luacode
  }{%
    \endluacode
  \]
}

\newenvironment{mathluacode*}{
  \[
    \luacodestar
  }{%
    \endluacodestar
  \]
}

\begin{mathluacode}
  tex.sprint("\\pi \\neq ", tostring(math.pi):gsub('%.', '+'))
  -- a lua comment
  tex.sprint("-", math.sqrt(\foo))
\end{mathluacode}

\begin{mathluacode*}
  -- a lua comment
  tex.sprint("\\pi \\neq ", tostring(math.pi):gsub('%.', '+'))
\end{mathluacode*}

\end{document}
%</testlatex>
%    \end{macrocode}
%
%
% \Finale
\endinput
